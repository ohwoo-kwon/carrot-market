// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // referentialIntegrity db 객체의 존재유무를 파악
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique
  email           String?     @unique
  name            String
  avatar          String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tokens          Token[]
  products Product[]
  posts Post[]
  answers Answer[]
  wonders Wondering[]
  writtenReviews Review[] @relation(name:"writtenReviews")
  receivedReviews Review[] @relation(name:"receivedReviews")
  sales Sale[]
  purchases Purchase[]
  favorites Favs[]
  records Record[]
  streams Stream[]
  messages Message[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId Int
  image String
  name String
  price Int
  description String @db.MediumText
  favorites Favs[]
  sales Sale[]
  purchases Purchase[]
  records Record[]
}

model Post {
  id        Int      @id @default(autoincrement())
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  question String @db.MediumText
  latitude Float?
  longitude Float?
  answers Answer[]
  wonders Wondering[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields:[postId], references:[id], onDelete:Cascade)
  postId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answer String @db.MediumText
}

model Wondering {
  id        Int      @id @default(autoincrement())
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields:[postId], references:[id], onDelete:Cascade)
  postId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  createdBy User @relation(name:"writtenReviews", fields:[createdById], references: [id], onDelete: Cascade)
  createdById Int
  createdFor User @relation(name:"receivedReviews", fields:[createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review String @db.MediumText
  score Int? @default(1)
}

model Sale {
  id        Int      @id @default(autoincrement())
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields:[productId], references:[id], onDelete:Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields:[productId], references:[id], onDelete:Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favs {
  id        Int      @id @default(autoincrement())
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields:[productId], references:[id], onDelete:Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Record {
  id        Int      @id @default(autoincrement())
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields:[productId], references:[id], onDelete:Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  kind Kind
}

enum Kind {
  Purchase
  Sale
  Favorite
}

model Stream {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId Int
  name String
  description String @db.MediumText
  price Int
  messages Message[]
  cloudflareId String
  cloudflareUrl String
  cloudflareKey String
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)
  userId Int
  message String @db.MediumText
  stream Stream @relation(fields:[streamId], references: [id], onDelete: Cascade)
  streamId Int
}